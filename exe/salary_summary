#!/usr/bin/env ruby

require "salary_summary"
include SalarySummary

@calculator         = Calculators::AnnualSalaryCalculator.new
@report_interpreter = Interpreters::SalaryReportInterpreter.new(@calculator)
@table              = Builders::TableBuilder.new(@calculator)
@information        = ''

COMMANDS = {
  salary: "enter salary\n",
  table: "print table\n",
  export: "export to file\n",
  find: "find\n",
  help: "help\n",
  exit: "exit\n"
}

puts 'Hello !! Welcome to the Salary Summary !'
puts 'We save all your salary records into collections and make comparisons at your disposal.'
puts "Commands are:"
print COMMANDS.map { |_, value| value.tr("\n", '')  }.join(' - ')
print "\n"
puts 'Type Ctrl-C to exit.'
print "\n"

loop do
  print 'What do you want to do ? '
  command = gets
  puts 'Command not found...' unless COMMANDS.values.include? command

  case command
  when COMMANDS.dig(:salary)
    print 'Which period ? '
    @information << "#{gets.tr("\n", '')}: "

    if @information !~ /[a-zA-Z\:?]/
      puts 'You have to enter a period first...'
      redo
    end

    print 'Which value ? '

    @information << gets
    salary = Interpreters::InformationInterpreter.parse!(@information)
    @calculator.enqueue(salary)
    @calculator.sum!

    print 'Please, type the name of the collection to save it: '

    collection_name = gets.gsub(/\s*/, '')

    Exporters::SalariesRepository.save!(salary, collection_name)

    puts "Saved correctly into the database: period: #{salary.period}, amount: #{salary.amount}"

    @information = ''
  when COMMANDS.dig(:table)
    print "Do you want to fetch from database or file? Options are 'database' or 'file': "

    option = gets.gsub(/\s*/, '')

    if option =~ /file/ and Dir.entries("dump/salary_summary").size == 2
      puts 'First, please export your data to a file, then, you can import it and print a table.'
      redo
    end

    if option =~ /file/
      print 'Enter the report file name: '
      file_name = gets.gsub(/\s*/, '')

      if File.exist?("dump/salary_summary/#{file_name}.csv")
        @report_interpreter.read_from_file(file_name)
        puts 'Report file loaded successfully !!'
      else
        puts 'This file does not exist. Please, try again...'
        redo
      end
    end

    if option =~ /database/
      print 'Enter the name of the collection: '
      collection_name = gets.gsub(/\s*/, '')

      salaries = Exporters::SalariesRepository.find_on(collection_name, true)

      salaries.each { |s| @calculator.enqueue(s) }
      @calculator.sum!
    end

    print "\n"
    puts "---Period------Amount---"
    @table.build_entries
    print "\n"
    @table.build_sum_footer
  when COMMANDS.dig(:export)
    if @calculator.total_amount.zero? and @calculator.salaries.empty?
      puts 'Enter your salary values first...'
      redo
    end

    print 'Enter the report file name: '
    file_name = gets.gsub(/\s*/, '')

    Exporters::AnnualSalaryReport.new(
      @calculator
    ).save!(file_name)

    puts 'Report file saved successfully !'
  when COMMANDS.dig(:exit)
    puts 'Good-bye for now !!'
    exit
  end

  print "\n"
end
